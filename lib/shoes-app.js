// Generated by CoffeeScript 1.3.1
(function() {
  var Para, Rect, Shoes, exports,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Para = (function() {

    Para.name = 'Para';

    function Para(container, text, style) {
      this.container = container;
      this.text = text;
      this.style = style;
      this.element = document.createElement("p");
      this.element.appendChild(document.createTextNode(this.text));
      this.container.appendChild(this.element);
      this;

    }

    return Para;

  })();

  exports = exports != null ? exports : window;

  exports.Para = Para;

  Rect = (function() {

    Rect.name = 'Rect';

    function Rect(context, left, top, width, height, style) {
      this.context = context;
      this.left = left;
      this.top = top;
      this.width = width;
      this.height = height;
      this.style = style;
    }

    Rect.prototype.draw = function() {
      this.context.beginPath();
      this.context.rect(this.left, this.top, this.width, this.height);
      this.context.fillStyle = this.style.fill;
      this.context.fill();
      this.context.lineWidth = this.style.strokewidth;
      this.context.strokeStyle = this.style.stroke;
      this.context.stroke();
      return this;
    };

    Rect.prototype.hide = function() {
      return this;
    };

    return Rect;

  })();

  exports = exports != null ? exports : window;

  exports.Rect = Rect;

  exports = exports != null ? exports : window;

  Shoes = (function() {

    Shoes.name = 'Shoes';

    function Shoes() {}

    Shoes.app = function(block) {
      var app;
      return app = new Shoes.App(block);
    };

    Shoes.sample = function() {
      return "Shoes.app ->\n  style = {\n    stroke: \"black\",\n    fill: \"mediumorchid\",\n    strokewidth: 4\n  }\n  rect 10, 40, 200, 200, style\n  para \"Here's a nice purple block to start with\"";
    };

    Shoes["eval"] = function(object, block) {
      var code, para, rect;
      rect = object.rect;
      para = object.para;
      code = "var withContext = " + block.toString() + ";";
      eval(code);
      withContext.call(object);
      return object;
    };

    return Shoes;

  })();

  exports.Shoes = Shoes;

  Shoes.App = (function() {

    App.name = 'App';

    function App(block) {
      this.block = block;
      this.para = __bind(this.para, this);

      this.rect = __bind(this.rect, this);

      this.canvas = document.getElementById('app-canvas');
      this.context = this.canvas.getContext('2d');
      this.container = document.getElementById('app-content');
      this.container.innerHTML = '';
      if (this.block) {
        Shoes["eval"](this, this.block);
      }
    }

    App.prototype.rect = function(left, top, width, height, style) {
      var rect;
      if (style == null) {
        style = {};
      }
      console.log("Making rect(" + left + ", " + top + ", " + width + ", " + height);
      rect = new Rect(this.context, left, top, width, height, style);
      return rect.draw();
    };

    App.prototype.para = function(text, style) {
      if (style == null) {
        style = {};
      }
      return new Para(this.container, text, style);
    };

    return App;

  })();

}).call(this);
